#!/usr/bin/env ruby

# Try to load external libs, helpers and constants
begin
  LIB_DIR = File.expand_path(File.dirname(__FILE__) + "/../lib/")
  require "rubygems"
  require "optparse"
  require 'tempfile'
  # require "#{LIB_DIR}/cli"
  require "#{LIB_DIR}/runner"
  require "#{LIB_DIR}/git"
  require "#{LIB_DIR}/docker"
  require "#{LIB_DIR}/dockerize"
rescue LoadError => e
  raise "EXITING: some basic libs were not found (#{e.message})"
end
#include Bmctools


DOCKER_REPO = "bmconseil/dummy"


d = BmcTools::Dockerize.new


# Config from command line
d.config_from_command_line(ARGV)

# Check options tag
d.check_options_tag

d.archive_tag

exit 1



# Prepare some context vars
# temp_archive    = "dockerize-archive-#{opt_tag}.tar"
release_name    = "#{DOCKER_REPO}:#{opt_tag}"
release_latest  = "#{DOCKER_REPO}:latest"

# Prepare commands
# cmd_archive     = Git.cmd_archive temp_archive, opt_tag
cmd_build       = Docker.cmd_build temp_archive, release_name
cmd_tag         = Docker.cmd_tag release_name, release_latest
opt_push        = Docker.cmd_push release_name
opt_push_latest = Docker.cmd_push release_latest


# Config summary
puts "--- DOCKERIZE CONFIG"
puts "Git tag            #{opt_tag}"
puts "Use latest tag     #{opt_latest}"
puts "Code archive       #{temp_archive}"
puts


# Checkout tag code in temp archive

# Build docker image from that archive
run_cmd cmd_build, "Building docker image"

# Tag latest if required
if opt_latest
  run_cmd cmd_tag, "Updating tag [#{release_latest}] to point to [#{release_name}]"
  opt_push += " && #{opt_push_latest}" if opt_latest
end

# Push releases
run_cmd opt_push, "Pushing releases" if opt_push


# $?.exitstatus
puts "* We're all set !"
exit 0
